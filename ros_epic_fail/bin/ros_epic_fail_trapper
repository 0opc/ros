#!/usr/bin/python


import roslib
roslib.load_manifest('rostest')
import roslib.rosenv
import os
import sys


results = roslib.rosenv.get_test_results_dir()
if not os.path.exists(results):
   raise "No test result directory!"

result_bags = os.path.join(roslib.rosenv.get_test_results_dir(), 
	    "ros_epic_fail_raw_bags")

if not os.path.exists(result_bags):
   os.makedirs(result_bags)

try:
   name = sys.argv[1]
except:
   raise "No name specified as argument."


file = os.path.join(result_bags, name)

print "-----------------------------------------------------------"
print "-----------------------------------------------------------"
print "-----------------------------------------------------------"
print "-----------------------------------------------------------"
print "-----------------------------------------------------------"
print "-----------------------------------------------------------"
print "--------------------- BAG FILE NAME -----------------------"
print "-----------------------------------------------------------"
print "-----------------------------------------------------------"
print "-----------------------------------------------------------"
print file, "(.bag)"
print "-----------------------------------------------------------"
print "-----------------------------------------------------------"
print "-----------------------------------------------------------"
print "------------------- END BAD FILE NAME ---------------------"
print "-----------------------------------------------------------"
print "-----------------------------------------------------------"
print "-----------------------------------------------------------"
print "-----------------------------------------------------------"

topic_names = 'amcl_pose arm_ik/status base_controller/state base_odometry/odom base_odometry/odometer base_odometry/state base_pose_ground_truth base_scan base_scan_marking base_scan_marking_throttled base_scan_shadow_filtered base_scan_throttled calibrated check_path/status clock detect_door/goal detect_door/result detect_door/status detect_handle/status diagnostics diagnostics_agg door_reactive_planner/costmap/inflated_obstacles door_reactive_planner/costmap/obstacles door_reactive_planner/costmap/unknown_space doorbot/door_pose doorbot/door_position_controller/state doorbot/handle_position_controller/state doorbot/joint_states doorbot/mechanism_statistics doors_detector_laser/door_frames doors_detector_laser/door_regions grasp_handle/status ground_object_cloud ground_object_cloud_throttled head_traj_controller/point_head_action/status head_traj_controller/state joint_states l_gripper_controller/gripper_action/status laser_tilt_controller/laser_scanner_signal map map_metadata mechanism_statistics move_base/status move_base_door/status move_base_local/status move_base_local_node/global_costmap/inflated_obstacles move_base_local_node/global_costmap/obstacles move_base_local_node/global_costmap/robot_footprint move_base_local_node/global_costmap/unknown_space move_base_local_node/global_costmap/voxel_grid move_base_local_node/local_costmap/voxel_grid move_base_node/local_costmap/inflated_obstacles move_base_node/local_costmap/obstacles move_base_node/local_costmap/robot_footprint move_base_node/local_costmap/unknown_space move_base_node/local_costmap/voxel_grid move_base_node/local_costmap/voxel_grid_throttled open_door/status particlecloud power_state push_door/status r_arm_controller/command r_arm_controller/joint_trajectory_action/status r_arm_controller/state r_gripper_controller/gripper_action/status r_gripper_controller/state r_gripper_effort_controller/command r_gripper_l_finger_force_ground_truth r_gripper_l_finger_pose_ground_truth r_gripper_palm_pose_ground_truth r_gripper_tool_frame_pose_ground_truth release_handle/status robot_pose_ekf/odom_combined rosout rosout_agg safety_tuck_arms/activate safety_tuck_arms/feedback set_laser_tilt/feedback switch_controller/goal switch_controller/result switch_controller/status test_output tf tilt_scan tilt_scan_filtered tilt_scan_filtered_throttled tilt_scan_shadow_filtered tilt_scan_throttled torso_controller/position_joint_action/status torso_controller/state torso_lift_imu/data touch_door/status unlatch_handle/status'

#FIXME: use a better method here.
os.system("rosrun rosrecord rosrecord -F \"" + file + "\" " + topic_names)
